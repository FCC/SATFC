buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.ajoberstar:gradle-git:0.12.0'
    }
}

allprojects {
    buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }
    }

    ext {
        springVersion = "4.1.5.RELEASE"
        jacksonVersion = "2.5.1"
        SATFCVersion = "1.5"
    }

    repositories {
        //EARG maven repo.
        maven {
            url 'https://bitbucket.org/EARG-builder/maven-repo/raw/master/releases/'
        }
        maven {
            url 'https://bitbucket.org/EARG-builder/maven-repo/raw/master/snapshots/'
        }
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'license'

    license {
        ext.name = 'SATFC'
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.author1 = 'Alexandre Fr√©chette'
        ext.author2 = 'Neil Newman'
        ext.author3 = 'Kevin Leyton-Brown'
        ext.email = 'afrechet@cs.ubc.ca'
        exclude "*.txt"
        header rootProject.file('LICENSE')
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'application'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    test {
        testLogging.showStandardStreams = true
        testLogging.showStackTraces = true
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

//Grab git information.
import org.ajoberstar.grgit.Grgit
public boolean isGitAvailable() {
    def repo
    try
    {
        repo = Grgit.open(rootProject.file('.'))
        return true
    }
    catch(Exception e)
    {
        println 'Not building SATFC from a git repository, versioning will be limited.'
        return false
    }
}

public String getGitName() {
    if (isGitAvailable()) {
        def repo = Grgit.open(rootProject.file('.'))
        def branch = repo.branch.current.name
        def sha = repo.head().abbreviatedId
        return branch+'-'+sha
    } else {
        return 'nogit'
    }
}

public String getGitInfo() {
    if (isGitAvailable()) {
        def repo = Grgit.open(rootProject.file('.'))
        return "buildTime=" + new Date().toString() + System.lineSeparator() +
                "sha=" + repo.head().id + System.lineSeparator() +
                "branch=" + repo.branch.current.name + System.lineSeparator() +
                "committer=" + repo.head().committer.name + System.lineSeparator() +
                "commitTime=" + repo.head().date + System.lineSeparator() +
                "message=" + repo.head().fullMessage + System.lineSeparator()
    } else {
        return "No git available"
    }
}
