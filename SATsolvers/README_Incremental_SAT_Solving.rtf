{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10780\viewh7840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \ul \ulc0 The steps required to get the incremental solver working:\ulnone \
1. Compile the source code into a dynamic library. Chris helped me with this (i.e. he did it all by modifying the makefile appropriately), so I unfortunately can't provide guidance about how to do it in the future. \
2. Because glueminisat code is written in c++, when it is compiled it is first translated to c, mangling the names. Thus, you can't directly call the c++ functions from Java. Instead, I have added pure c functions in a block in Solver.cc: \
\
//Added by narnosti\
extern "C"\{\
	//functions here\
\}\
//end: added by narnosti\
\
These functions can only use c primitives, so vectors and solver objects are past as pointers and then cast to the appropriate objects. They are all very simple - they cast a pointer to an object and then call a function that exists in the glueminisat c++ library.\
\
If you're working with a solver that was written in pure c (rather than c++), you might not need to modify the c code much or at all, since names (hopefully) won't be mangled - you may be able to call the functions directly from java.\
\
3. To call these c functions from Java,  adding a function with the same signature to the "GMSLibrary" interface in GlueMiniSatLibrary.java.\
4. Then, write the methods in the IncrementalSATLibrary interface using the functions in the GMSLibrary.\
\
\
\
\ul If you want to make changes to the source code\ulnone  (for example, to call functions from Java that glueminisat supports but I didn't use):\
-Solver functions that already exist are listed in Solver.h. \
-To be able to call them, you'll have to add code to Solver.cc (in between the "added by narnosti" comments), since only code in the extern "C" block will not have its name mangled.\
-If you see types or functions that you don't recognize, they are likely defined either in Solver.cc, Solver.h, or SolverTypes.h.\
-After you've made changes, typing "make slibs" from the core/ folder should re-compile everything.\
-To call new functions from Java, just add them to the GMSLibrary interface.\
-Be aware of compiler optimizations and compatibilities when passing parameters from c to java - one or two interesting discoveries of mine are annotated in the c code. Something that came up repeatedly is that it often matters whether you pass things as an int or a bool. I debugged using printf statements - call fflush(stdout) to make sure these appear in the "right" order relative to the statements printed by the java code. }